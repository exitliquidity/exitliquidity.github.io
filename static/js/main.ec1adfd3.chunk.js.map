{"version":3,"sources":["contracts/external_contracts.js","hooks/OnBlock.js","hooks/Poller.js","hooks/Balance.js","hooks/ContractLoader.js","hooks/ContractReader.js","hooks/ResolveName.js","hooks/BurnerSigner.js","hooks/UserSigner.js","hooks/UserProvider.js","hooks/useExternalContractLoader.js","components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","helpers/ipfs.js","helpers/index.js","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/FunctionForm.jsx","components/Faucet.jsx","components/Timeline.jsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","hooks/EventListener.js","index.jsx","contracts/Pillz.abi.js"],"names":["module","exports","contracts","DAI","address","abi","inputs","internalType","name","type","payable","stateMutability","anonymous","indexed","constant","outputs","UNI","useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","id","setInterval","clearInterval","useBalance","pollTime","useState","balance","setBalance","pollBalance","useCallback","a","getBalance","newBalance","ethers","require","useContractLoader","providerOrSigner","config","setContracts","customAddressKeys","customAddresses","Object","keys","join","customAddressValues","values","active","console","log","listAccounts","accounts","Signer","isSigner","signer","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","reduce","accumulator","contractName","_address","includes","Contract","loadContracts","useContractReader","functionName","formatter","onChange","adjustPollTime","value","setValue","tried","setTried","setTimeout","bind","updateValue","newValue","useBurnerSigner","key","setSigner","storedValue","setStoredValue","window","localStorage","setItem","error","storedKey","getItem","_newKey","Wallet","createRandom","privateKey","_signer","connect","useUserSigner","injectedProvider","localProvider","burnerSigner","useMemo","injectedSigner","_isProvider","location","pathname","indexOf","rawPK","incomingPK","hash","replace","history","pushState","currentPrivateKey","Date","now","useExternalContractLoader","ABI","optionalBytecode","contract","setContract","customContract","bytecode","loadContract","Typography","Text","utils","INFURA_ID","NETWORKS","localhost","color","blockExplorer","rpcUrl","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","localAvalanche","fujiAvalanche","mainnetAvalanche","NETWORK","n","callbacks","Transactor","etherscan","tx","callback","network","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","wait","data","JSON","parse","stringify","body","obj","errorObj","host","port","protocol","getURLParam","param","queryString","search","URLSearchParams","get","Paragraph","Account","userSigner","mainnetProvider","minimized","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","modalButtons","cachedProvider","push","style","verticalAlign","marginLeft","marginTop","shape","size","onClick","useThemeSwitcher","currentTheme","display","constants","BigNumber","Option","Select","ipfsClient","createIPFSClient","PillzAddress","targetNetwork","scaffoldEthProvider","providers","StaticJsonRpcProvider","poktMainnetProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","logo","Portis","fortmatic","Fortmatic","connector","enable","authereum","Authereum","ViewPage","props","setData","image","setImage","pillzInstance","useUserProvider","PillzABI","dataUri","Pillz","fetch","response","json","imageData","text","imageBody","getData","attributes","to","from","src","width","App","_network","setInjectedProvider","setAddress","showModal","setShowModal","loading","setLoading","toName","setToName","fromName","setFromName","textColor","fontName","setFontName","styleName","setStyleName","recepient","setRecpient","ref","view","clearCachedProvider","disconnect","reload","setPrice","Token","Fetcher","fetchPairData","WETH","pair","route","Route","parseFloat","midPrice","toSignificant","getPrice","useExchangePrice","speed","setGasPrice","loadGasPrice","axios","then","newGasPrice","catch","useGasPrice","getAddress","newAddress","localChainId","selectedChainId","yourLocalBalance","yourMainnetBalance","readContracts","writeContracts","mainnetContracts","_lastBlockNumber","maxSupply","mintedSoFar","eventName","startBlock","updates","setUpdates","resetEventsBlock","messages","pop","removeListener","useEventListener","networkDisplay","networkSelected","networkLocal","zIndex","position","right","top","padding","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","Web3Provider","code","reason","setRoute","addTextToImage","name1","text1","text2","font1","circle_canvas","document","getElementById","context","getContext","clearRect","height","img","Image","onload","drawImage","lineWidth","fillStyle","lineStyle","font","fontWeight","fillText","toDataURL","connection","className","exact","path","parseInt","objectFit","margin","backgroundColor","formatUnits","defaultValue","placeholder","target","dt","add","imageUpload","imagePath","interface","encodeFunctionData","parseEther","opacity","href","alert","themes","dark","light","prevTheme","subgraphUri","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme"],"mappings":"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","file":"static/js/main.ec1adfd3.chunk.js","sourcesContent":["const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\nconst DEBUG = false;\n\nexport default function useOnBlock(provider, fn, args) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n\n  // Turn on the listener if we have a function & a provider\n  useEffect(() => {\n    if (fn && provider) {\n      const listener = blockNumber => {\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\n\n        if (args && args.length > 0) {\n          savedCallback.current(...args);\n        } else {\n          savedCallback.current();\n        }\n      };\n\n      provider.on(\"block\", listener);\n\n      return () => {\n        provider.off(\"block\", listener);\n      };\n    }\n  }, [provider]);\n}\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  // run at start too\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n","import { useCallback, useState, useEffect } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nconst DEBUG = false;\n\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n\n  const pollBalance = useCallback(\n    async (provider, address) => {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      }\n    },\n    [provider, address],\n  );\n\n  // Only pass a provider to watch on a block if there is no pollTime\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  });\n\n  // Update balance when the address or provider changes\n  useEffect(() => {\n    if (address && provider) pollBalance(provider, address);\n  }, [address, provider, pollBalance]);\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (provider && address && pollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", address);\n        pollBalance();\n      }\n    },\n    pollTime,\n    provider && address,\n  );\n\n  return balance;\n}\n","/* eslint-disable global-require */\nimport { useEffect, useState } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts\n  or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n\n  config can include:\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\n  - hardhatNetworkName - to hardcode the hardhat network of interest\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\n*/\n\nexport default function useContractLoader(providerOrSigner, config = {}) {\n  const [contracts, setContracts] = useState();\n\n  const customAddressKeys = config.customAddresses && Object.keys(config.customAddresses).join();\n  const customAddressValues = config.customAddresses && Object.values(config.customAddresses).join();\n\n  useEffect(() => {\n    let active = true;\n\n    async function loadContracts() {\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\n        console.log(`loading contracts`);\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let provider;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (ethers.Signer.isSigner(providerOrSigner)) {\n            signer = providerOrSigner;\n            provider = signer.provider;\n          } else if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n            provider = providerOrSigner;\n          } else {\n            signer = providerOrSigner;\n            provider = providerOrSigner;\n          }\n\n          const providerNetwork = await provider.getNetwork();\n\n          const _chainId = config.chainId || providerNetwork.chainId;\n\n          let contractList = {};\n          let externalContractList = {};\n          try {\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\n          } catch (e) {\n            console.log(e);\n          }\n          try {\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          let combinedContracts = {};\n\n          if (contractList[_chainId]) {\n            for (const hardhatNetwork in contractList[_chainId]) {\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\n                  combinedContracts = {\n                    ...combinedContracts,\n                    ...contractList[_chainId][hardhatNetwork].contracts,\n                  };\n                }\n              }\n            }\n          }\n\n          if (externalContractList[_chainId]) {\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\n            const _address =\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\n                ? config.customAddresses[contractName]\n                : combinedContracts[contractName].address;\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\n            return accumulator;\n          }, {});\n          if (active) setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n\n    return () => {\n      active = false;\n    };\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName, customAddressKeys, customAddressValues]);\n\n  return contracts;\n}\n","import { useEffect, useState } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\nconst DEBUG = false;\n\n/*\n  ~ What it does? ~\n\n  Enables you to read values from contracts and keep track of them in the local React states\n\n  ~ How can I use? ~\n\n  const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the variable in the contract, in this case we keep track of \"purpose\" variable\n  - Pass an args array if the function requires\n  - Pass pollTime - if no pollTime is specified, the function will update on every new block\n*/\n\nexport default function useContractReader(contracts, contractName, functionName, args, pollTime, formatter, onChange) {\n  let adjustPollTime = 0;\n  if (pollTime) {\n    adjustPollTime = pollTime;\n  } else if (!pollTime && typeof args === \"number\") {\n    // it's okay to pass poll time as last argument without args for the call\n    adjustPollTime = args;\n  }\n\n  const [value, setValue] = useState();\n  const [tried, setTried] = useState(false);\n\n  useEffect(() => {\n    if (typeof onChange === \"function\") {\n      setTimeout(onChange.bind(this, value), 1);\n    }\n  }, [value, onChange]);\n\n  const updateValue = async () => {\n    try {\n      let newValue;\n      if (DEBUG) console.log(\"CALLING \", contractName, functionName, \"with args\", args);\n      if (args && args.length > 0) {\n        newValue = await contracts[contractName][functionName](...args);\n        setTried(true);\n        if (DEBUG)\n          console.log(\"contractName\", contractName, \"functionName\", functionName, \"args\", args, \"RESULT:\", newValue);\n      } else {\n        newValue = await contracts[contractName][functionName]();\n        setTried(true);\n      }\n      if (formatter && typeof formatter === \"function\") {\n        newValue = formatter(newValue);\n      }\n      // console.log(\"GOT VALUE\",newValue)\n      if (newValue !== value) {\n        setValue(newValue);\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  // Only pass a provider to watch on a block if we have a contract and no PollTime\n  useOnBlock(contracts && contracts[contractName] && adjustPollTime === 0 && contracts[contractName].provider, () => {\n    if (contracts && contracts[contractName] && adjustPollTime === 0) {\n      if (DEBUG) console.log(\"on-blocking!\", contractName, functionName);\n      updateValue();\n    }\n  });\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (contracts && contracts[contractName] && adjustPollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", contractName, functionName);\n        updateValue();\n      }\n    },\n    adjustPollTime,\n    contracts && contracts[contractName],\n  );\n\n  if (tried === false && contracts && contracts[contractName]) {\n    updateValue();\n  }\n\n  return value;\n}\n","import { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(constants.AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n","import { useState, useEffect } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nexport default function useBurnerSigner(provider) {\n  const key = \"metaPrivateKey\";\n  let wallet;\n  const [signer, setSigner] = useState();\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n    if (!storedKey) {\n      console.log(\"generating a new key\");\n      const _newWallet = ethers.Wallet.createRandom();\n      const _newKey = _newWallet.privateKey;\n      setValue(_newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedValue && provider) {\n      wallet = new ethers.Wallet(storedValue);\n      const _signer = wallet.connect(provider);\n      setSigner(_signer);\n    }\n  }, [storedValue, provider]);\n\n  return signer;\n}\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","\n/* eslint-disable global-require */\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useState, useEffect } from \"react\";\n\n/*\n  when you want to load an existing contract using just the provider, address, and ABI\n*/\n\nexport default function useExternalContractLoader(provider, address, ABI, optionalBytecode) {\n  const [contract, setContract] = useState();\n  useEffect(() => {\n    async function loadContract() {\n      if (typeof provider !== \"undefined\" && address && ABI) {\n        try {\n          // we need to check to see if this provider has a signer or not\n          let signer;\n          const accounts = await provider.listAccounts();\n          if (accounts && accounts.length > 0) {\n            signer = provider.getSigner();\n          } else {\n            signer = provider;\n          }\n\n          const customContract = new Contract(address, ABI, signer);\n          if(optionalBytecode) customContract.bytecode = optionalBytecode\n\n          setContract(customContract);\n        } catch (e) {\n          console.log(\"ERROR LOADING EXTERNAL CONTRACT AT \"+address+\" (check provider, address, and ABI)!!\", e);\n        }\n      }\n    }\n    loadContract();\n  }, [provider, address, ABI, optionalBytecode]);\n  return contract;\n}\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"../hooks\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\") < 0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n\n      var options = null;\n      var notify = null;\n      if(navigator.onLine){\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };\n\n        notify = Notify(options);\n      }\n\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message = e.data && e.data.message ? e.data.message : e.error && JSON.parse(JSON.stringify(e.error)).body ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message : e.data ? e.data : JSON.stringify(e);\n        if(!e.error && e.message){\n          message = e.message\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try{\n          let obj = JSON.parse(message)\n          if(obj && obj.body){\n            let errorObj = JSON.parse(obj.body)\n            if(errorObj && errorObj.error && errorObj.error.message){\n              message = errorObj.error.message\n            }\n          }\n        }catch(e){\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","const IPFS = require('ipfs-api');\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\n\nexport default ipfs;","export { default as Transactor } from \"./Transactor\";\nexport { default as ipfs } from \"./ipfs\";\n\n\nexport function standardizeLink (link) {  \n    if (link) {\n        link = link.replace(\"ipfs://ipfs/\", \"https://ipfs.io/ipfs/\")\n        return link.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } else {\n        return \"\";\n    }\n  };\n\n  export function ipfsLinkFromHash(hash) {\n      return \"https://ipfs.io/ipfs/\"+hash;\n  }\n\n  export function getURLParam(param) {\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    return urlParams.get(param);\n  }","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <span>\n     \n    </span>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0;\n              const args = functionInfo.inputs.map(input => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                const returned = await contractFunction(...args);\n                result = tryToDisplay(returned);\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        //console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        // value={address}\n        value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={props.localProvider}\n              ensProvider={props.ensProvider}\n              price={props.price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\n//import Torus from \"@toruslabs/torus-embed\"\nimport WalletLink from \"walletlink\";\nimport { Alert, Button, Col, Menu, Row, Input, Select } from \"antd\";\nconst { Option } = Select;\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter, Link, Route, Switch, useParams } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport { Account, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor, getURLParam } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useExternalContractLoader,\n  useEventListener,\n  useExchangePrice,\n  useGasPrice,\n  useOnBlock,\n  useUserProvider,\n} from \"./hooks\";\nimport Portis from \"@portis/web3\";\nimport Fortmatic from \"fortmatic\";\nimport Authereum from \"authereum\";\n\nimport PillzABI from \"./contracts/Pillz.abi\";\n//import PillzAddress from \"./contracts/Pillz.address\";\nimport { formatEther, formatUnits, parseEther } from \"ethers/lib/utils\";\n\nimport P5Wrapper from 'react-p5-wrapper';\nimport pillSketch from \"./sketch\";\n\n\nconst { ethers, BigNumber } = require(\"ethers\");\n\n\nimport { create as createIPFSClient } from 'ipfs-http-client';\nconst ipfsClient = createIPFSClient('https://ipfs.infura.io:5001')\nconst PillzAddress = \"0xf76ef263AB364fF3bF5A332fE8Fe8a6E879EFa2E\";\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.arbitrum; // <------- select your target frontend network (localhost, rinkeby, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\") : null;\nconst poktMainnetProvider = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\") : null;\nconst mainnetInfura = navigator.onLine ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID) : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I )\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// 🔭 block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: 'coinbase',\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(\n  `https://mainnet.infura.io/v3/${INFURA_ID}`,\n  1,\n);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  network: \"arbitrum\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n  cacheProvider: true, // optional\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        bridge: \"https://polygon.bridge.walletconnect.org\",\n        infuraId: INFURA_ID,\n        rpc: {\n          1: `https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n          42: `https://kovan.infura.io/v3/${INFURA_ID}`,\n          100: \"https://dai.poa.network\", // xDai,\n          41261: \"https://arb1.arbitrum.io/rpc\"\n        },\n      },\n\n    },\n    portis: {\n      display: {\n        logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n        name: \"Portis\",\n        description: \"Connect to Portis App\",\n      },\n      package: Portis,\n      options: {\n        id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n      },\n    },\n    fortmatic: {\n      package: Fortmatic, // required\n      options: {\n        key: \"pk_live_5A7C91B2FC585A17\", // required\n      },\n    },\n    // torus: {\n    //   package: Torus,\n    //   options: {\n    //     networkParams: {\n    //       host: \"https://localhost:8545\", // optional\n    //       chainId: 1337, // optional\n    //       networkId: 1337 // optional\n    //     },\n    //     config: {\n    //       buildEnv: \"development\" // optional\n    //     },\n    //   },\n    // },\n    'custom-walletlink': {\n      display: {\n        logo: 'https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0',\n        name: 'Coinbase',\n        description: 'Connect to Coinbase Wallet (not Coinbase App)',\n      },\n      package: walletLinkProvider,\n      connector: async (provider, options) => {\n        await provider.enable();\n        return provider;\n      },\n    },\n    authereum: {\n      package: Authereum, // required\n    }\n  },\n});\n\n\n\nfunction App(props) {\n  const mainnetProvider = poktMainnetProvider && poktMainnetProvider._isProvider ? poktMainnetProvider : scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [showModal, setShowModal] = useState();\n  const [loading, setLoading] = useState();\n  const [toName, setToName] = useState(\"\");\n  const [fromName, setFromName] = useState(\"\");\n  const [textColor, setTextColor] = useState(\"black\");\n  const [fontName, setFontName] = useState(\"sans-serif\");\n  const [styleName, setStyleName] = useState(\"apu\");\n  const [recepient, setRecpient] = useState(\"\");\n  let ref = getURLParam(\"ref\");\n  let view = getURLParam(\"view\");\n  if (!ref) {\n    ref = \"0x0000000000000000000000000000000000000000\";\n  }\n  if (!view) {\n    view = 0;\n  }\n  console.log(`ref is ${ref}`);\n\n\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userSigner = useUserProvider(injectedProvider, localProvider);\nconsole.log(injectedProvider);\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n        setRecpient(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(userSigner);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, { chainId: localChainId });\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  const pillzInstance = useExternalContractLoader(injectedProvider, PillzAddress, PillzABI);\nconsole.log(`pillzInstance ${pillzInstance}`);\n  // keep track of a variable from the contract in the local React state:\n  const maxSupply = useContractReader({ Pillz: pillzInstance }, \"Pillz\", \"maxSupply\");\n  console.log(`max supply is ${maxSupply}`);\n  const mintedSoFar = useContractReader({ Pillz: pillzInstance }, \"Pillz\", \"minted\");\n  console.log(`mintedSoFar is ${mintedSoFar}`);\n\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n\n  // 📟 Listen for broadcast events\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      readContracts &&\n      writeContracts &&\n      mainnetContracts\n    ) {\n   /*    console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🔐 writeContracts\", writeContracts);\n      console.log(\"🔐 selectedChainId\", selectedChainId); */\n    }\n  }, [\n    mainnetProvider,\n    address,\n    selectedChainId,\n    yourLocalBalance,\n    yourMainnetBalance,\n    readContracts,\n    writeContracts,\n    mainnetContracts,\n  ]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n                    const tx = await ethereum.request({ method: \"wallet_addEthereumChain\", params: data }).catch();\n                    if (tx) {\n                      console.log(tx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n                .\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n\n  console.log(`userProvdier is ${userSigner}`);\n  console.log(userSigner);\n  console.log(`address is ${address}`);\n\n  function addTextToImage(name1, text1, text2, font1) {\n    var circle_canvas = document.getElementById(\"canvas\");\n    var context = circle_canvas.getContext(\"2d\");\n    context.clearRect(0, 0, circle_canvas.width, circle_canvas.height);\n    // Draw Image function\n    var img = new Image();\n    img.src = \"./\" + name1 + \".png\";\n    img.onload = async function () {\n      context.drawImage(img, 0, 0);\n      context.lineWidth = 1;\n      context.fillStyle = textColor;\n      context.lineStyle = \"#ffff00\";\n      context.font = \"100px \" + font1;\n      context.fontWeight = \"bold\";\n      context.fillText(text1, 1478, 675);\n      context.fillText(text2, 1540, 990);\n\n      var data = document.getElementById(\"canvas\").toDataURL();\n      //console.log(data);\n      console.log(\"data above\")\n      document.getElementById(\"imag\").src = data;\n      console.log(\"data set\");\n      /* \n      const imageUpload = await ipfsClient.add(data);\n      const imagePath = `https://ipfs.io/ipfs/${imageUpload.path}`;\n      console.log(\"ipfs url\");\n      console.log(imagePath); */\n    };\n\n  }\n\n\n\n\n\n  function handleStyleChange(value) {\n    console.log(`selected ${value}`);\n    setStyleName(value);\n\n    addTextToImage(value, toName, fromName, fontName);\n  }\n\n  function handleSelectChange(value) {\n    console.log(`selected ${value}`);\n    setFontName(value);\n\n    addTextToImage(styleName, toName, fromName, value);\n  }\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      {/* <Header /> */}\n      {networkDisplay}\n      <BrowserRouter>\n\n\n        <div id=\"overlay\" style={{ display: showModal ? \"block\" : \"none\" }} onClick={() => setShowModal(false)}>\n        </div>\n\n        <Switch>\n          <Route exact path=\"/\">\n            {parseInt(view) >= 1 && parseInt(view)  <= 69 ?\n          /* show view page */  \n          <ViewPage injectedProvider={injectedProvider} id={parseInt(view)}/>\n        \n        :\n        /* show mint page */\n\n        <>\n        <img src=\"./apu.png\" id=\"imag\" style={{ objectFit: \"cover\", width: \"100%\" }} />\n   \n          <div style={{ margin: \"4%\", padding: \"1%\", backgroundColor: \"#FF94C9\", color: \"white\", height: \"40%\" }}>\n            <h1 style={{ color: \"white\" }}>Treat Your Valentine</h1>\n\n            <p>{formatUnits(mintedSoFar ? mintedSoFar : \"0\", \"wei\")}/{formatUnits(maxSupply ? maxSupply : \"0\", \"wei\")} unique card gifts</p>\n\n            <label>Font:</label>\n            <Select defaultValue=\"sans-serif\" style={{ width: 120 }} onChange={handleSelectChange}>\n              <Option value=\"sans-serif\">Sans-Serif</Option>\n              <Option value=\"lobster\">Lobster</Option>\n              <Option value=\"Comic\">Comic Sans</Option>\n              <Option value=\"monospace\">Courier</Option>\n            </Select>\n\n            <div style={{ height: \"10px\" }}></div>\n            <Input\n              placeholder={'To'}\n              backgroundColor=\"white\"\n              value={toName}\n              onChange={(e) => {\n                //localStorage.clear();\n                setToName(e.target.value)\n\n                addTextToImage(styleName, e.target.value, fromName, fontName);\n              }}\n            />\n            <div style={{ height: \"10px\" }}></div>\n            <Input\n              placeholder={'From'}\n              backgroundColor=\"white\"\n              value={fromName}\n              onChange={(e) => {\n                //localStorage.clear();\n                setFromName(e.target.value)\n\n                addTextToImage(styleName, toName, e.target.value, fontName);\n              }}\n            />\n            <div style={{ height: \"10px\" }}></div>\n            <label>Style:</label>\n\n            <Select defaultValue=\"apu\" style={{ width: 120 }} onChange={handleStyleChange}>\n              <Option value=\"apu\">Apu</Option>\n              <Option value=\"kanna\">Kanna</Option>\n              <Option value=\"simp\">Simp</Option>\n            </Select>\n\n            <div style={{ height: \"10px\" }}></div>\n\n            <label>\n              What address do you want the NFT sent to? By default it will be sent to your's.\n            </label>\n            <br />\n            <Input\n              placeholder={'To'}\n              backgroundColor=\"white\"\n              value={recepient}\n              onChange={(e) => {\n                //localStorage.clear();\n                setRecpient(e.target.value)\n\n              }}\n            />\n\n\n            <p><b>1 Card = 0.03Ξ</b></p>\n            {!loading ?\n              (injectedProvider ?\n                <Button onClick={async () => {\n                  setLoading(true);\n\n                  addTextToImage(styleName, toName, fromName, fontName);\n                         var dt = {image:document.getElementById(\"imag\").src, attributes: {from: fromName, to: toName, font: fontName, style: styleName}, name: `V Card #${parseInt(mintedSoFar)+1}`};\n                         \n                         const imageUpload = await ipfsClient.add(document.getElementById(\"imag\").src);\n                         const imagePath = `https://ipfs.io/ipfs/${imageUpload.path}`;\n                         dt.image = imagePath;\n                         const { path } = await ipfsClient.add(JSON.stringify(dt));\n\n                         console.log(`deployed to ${path}`);\n                         \n\n\n\n                  // localStorage.clear();\n                   \n                  \n                                        console.log(`uploaded to ipfs`);\n                                        console.log(`https://ipfs.io/ipfs/${path}`); \n                       const data = pillzInstance.interface.encodeFunctionData(\"mint\", [recepient, path, ref]);        \n                      tx(\n                       userSigner.sendTransaction({\n                           to: PillzAddress,\n                           data: data,\n                           value: parseEther((0.03).toString()),\n                       }),\n                       );   \n                  setLoading(false);\n\n\n\n                }}>😍Mint🥰</Button>\n                :\n                <div onClick={() => setShowModal(false)}>\n                  <Account\n                    address={address}\n                    localProvider={localProvider}\n                    userSigner={userSigner}\n                    mainnetProvider={mainnetProvider}\n                    price={price}\n                    web3Modal={web3Modal}\n                    loadWeb3Modal={loadWeb3Modal}\n                    logoutOfWeb3Modal={logoutOfWeb3Modal}\n                    blockExplorer={blockExplorer}\n                  />\n                </div>\n              )\n              : <>Loading...</>\n            }\n\n            <div style={{ display: \"none\" }}>\n              \n            </div>\n            <br />\n            <br />\n\n            <br />\n            <canvas id=\"canvas\" width=\"2162\" height=\"1198\" style={{ opacity: \"0%\", display: \"none\" }} />\n\n            <br />\n            {injectedProvider ?\n              <p>Want to earn <b>25%</b> of each sale? Heres a referral link just for you:<br />\n                <a style={{ color: \"black\" }} href={`https://exitliquidity.art/?ref=${address}`}>{`https://exitliquidity.art/?ref=${address}`}</a></p>\n              : <></>}\n\n          </div>\n              <button onClick={() => {\n                alert(\" Data for these NFTs are stored on the IPFS network as PNG files encoded as Base64 strings\")\n              }}>Disclaimers</button>\n          <p style={{ color: \"black\" }}>Created By: <a href=\"https://twitter.com/0xPuffin\">0xPuffin🐧</a> | 2022</p>\n\n        </>\n        }\n          </Route>\n\n          <Route path=\"/view/:id\">\n            <ViewPage injectedProvider={injectedProvider}/>\n          </Route>\n\n        </Switch>\n      </BrowserRouter>\n\n\n    </div>\n  );\n}\n\nfunction ViewPage(props) {\n  const {injectedProvider} = props;\n  console.log(injectedProvider);\n  console.log(props);\n  console.log(\"viewpage\");\n  //const {id} = useParams();\nconst id = props.id;\n  const [data, setData] = useState();\n  const [image, setImage] = useState();\n  const userSigner = useUserProvider(injectedProvider, localProvider);\n  const readContracts = useContractLoader(userSigner);\n  const pillzInstance = useExternalContractLoader(injectedProvider, PillzAddress, PillzABI);\n  console.log(`pillzInstance ${pillzInstance}`);\n    // keep track of a variable from the contract in the local React state:\n    const dataUri = useContractReader({ Pillz: pillzInstance }, \"Pillz\", \"tokenURI\", [id]);\n    console.log(`data uri is ${dataUri}`)\n    console.log(`body is ${data}`);\n    console.log(data);\n   \n\n  useEffect(() => {\n    async function getData() {\n      if (dataUri) {\n\n  const response = await fetch(\"https://ipfs.io/ipfs/\"+dataUri);\n  console.log(`data is =================================**********`);\n  const body = await response.json();\n  console.log(body);\n  setData(body);\n\n  const imageData = await fetch(body.image);\n  const imageBody = await imageData.text();\nconsole.log(`imageData ${imageBody} 🐧🐧🐧🐧🐧🐧🐧🐧🐧🐧🐧`)\n  console.log(imageData.body);\n  setImage(imageBody);\n\n      }\n    }\n    getData();\n  }, [dataUri]);\n\n    \n    if (!injectedProvider) {\n      return (\"Please Visit the main page to connect your wallet to view your Card\");\n    } \n  return (\n    \n    <>Viewing: {data ? data.name: id}\n    {data ?\n    <>\n    <p>To: {data.attributes.to}</p>\n    <p>from: {data.attributes.from}</p>\n    <img src={image} style={{width: \"100%\"}}/>\n    </>:\n    <></>}\n    </>\n  )\n}\n\nexport default App;\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if(!mainnetProvider)\n        return 0;\n      if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const DAI = new Token(\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          18,\n        );\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n    getPrice();\n  };\n  usePoller(pollPrice, pollTime || 9777);\n\n  return price;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useGasPrice(targetNetwork, speed) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if(navigator.onLine){\n        axios\n          .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\n          .then(response => {\n            const newGasPrice = response.data[speed || \"fast\"] * 100000000;\n            if (newGasPrice !== gasPrice) {\n              setGasPrice(newGasPrice);\n            }\n          })\n          .catch(error => console.log(error));\n      }\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n","import { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Enables you to keep track of events\n\n  ~ How can I use? ~\n\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\n\n  ~ Features ~\n\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\n  - Specify the name of the contract, in this case it is \"YourContract\"\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\n  - Specify the provider\n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  const [updates, setUpdates] = useState([]);\n\n  useEffect(() => {\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, (...args) => {\n          const blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [{ blockNumber, ...args.pop().args }, ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n\n  return updates;\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","module.exports = [\n  {\n    \"inputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"constructor\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"approved\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Approval\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"bool\",\n        \"name\": \"approved\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"name\": \"ApprovalForAll\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": false,\n        \"internalType\": \"uint256\",\n        \"name\": \"id\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"indexed\": false,\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"Mint\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"previousOwner\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"newOwner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"OwnershipTransferred\",\n    \"type\": \"event\"\n  },\n  {\n    \"anonymous\": false,\n    \"inputs\": [\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"indexed\": true,\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"Transfer\",\n    \"type\": \"event\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"approve\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"balanceOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"baseURI\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"getApproved\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"isApprovedForAll\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"maxSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"recipient\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"string\",\n        \"name\": \"uri\",\n        \"type\": \"string\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"referal\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"mint\",\n    \"outputs\": [],\n    \"stateMutability\": \"payable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"mintPrice\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"minted\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"name\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"owner\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"ownerOf\",\n    \"outputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"\",\n        \"type\": \"address\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"renounceOwnership\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"safeTransferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      },\n      {\n        \"internalType\": \"bytes\",\n        \"name\": \"_data\",\n        \"type\": \"bytes\"\n      }\n    ],\n    \"name\": \"safeTransferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"operator\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"approved\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"name\": \"setApprovalForAll\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"bytes4\",\n        \"name\": \"interfaceId\",\n        \"type\": \"bytes4\"\n      }\n    ],\n    \"name\": \"supportsInterface\",\n    \"outputs\": [\n      {\n        \"internalType\": \"bool\",\n        \"name\": \"\",\n        \"type\": \"bool\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"symbol\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"index\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tokenByIndex\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"owner\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"index\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tokenOfOwnerByIndex\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"tokenURI\",\n    \"outputs\": [\n      {\n        \"internalType\": \"string\",\n        \"name\": \"\",\n        \"type\": \"string\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [],\n    \"name\": \"totalSupply\",\n    \"outputs\": [\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"from\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"address\",\n        \"name\": \"to\",\n        \"type\": \"address\"\n      },\n      {\n        \"internalType\": \"uint256\",\n        \"name\": \"tokenId\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"name\": \"transferFrom\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  },\n  {\n    \"inputs\": [\n      {\n        \"internalType\": \"address\",\n        \"name\": \"newOwner\",\n        \"type\": \"address\"\n      }\n    ],\n    \"name\": \"transferOwnership\",\n    \"outputs\": [],\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n];"],"sourceRoot":""}